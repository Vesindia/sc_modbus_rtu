Programming Guide=================Installing the component------------------------The *Modbus RTU Slave* component can be installed via the xSOFTip browser in the xTIMEcomposer or downloaded via http://www.xmos.com.Using the Module----------------To use the module you need to add ``module_modbus_rtu`` to the ``USED_MODULES`` variable in your application Makefile.*Files*``modbus_rtu.h``   Include this file in your application to run the Modbus RTU Server on a logical core.``modbus_rtu_conf.h``   Have this file in your application and set the configuration defines as described in the :ref:`modbus_rtu_api` section.*Ports*The application must define ports to use for RS485 interface. RS485 ports can be defined as (sample)::    on tile[0]: rs485_interface_t rs485_if =   {      XS1_PORT_1J,      XS1_PORT_4E   };  *Variables*Application must define the Baud Rate and Parity for Modbus RTU component to use. For example::   #define BAUD    9600              /**< Baud rate for RS485. */   #define PARITY  RS485_PARITY_EVEN /**< Parity for RS485. Options:                                          RS485_PARITY_EVEN,                                          RS485_PARITY_ODD or                                          RS485_PARITY_NONE. See RS485                                          documentation for further info.*/   #define MODBUS_SLAVE_ADDRESS  10  /**< Modbus RTU slave address. */   *Data Over Channel (c_modbus)*The ``module_modbus_rtu``, when it receives a command from Modbus Master, processes them by requesting certain data from the application over ``c_modbus``. The type of data it sends over the channel is:- unsigned char: Modbus command- unsigned short: Address to read/write- unsigned short: Value to write (sent always. For a 'read' command, this is 0)And expects:- unsigned short: value (for Read) or status (for write) After this, it ends this transaction and waits for the next command. So, the application side must listen to ``c_modbus`` for a command, address and value and respond with requested data.   Demo applications-----------------A Demo application is supplied with the component that implements an application to get Modbus commands from a Host Modbus master application (SimplyModbus for PC) and uses a ``XA-SK-GPIO`` slice card to:- Turn GPIO Slice Card LEDS on and off- Read the room temperature via the on-board ADC- Display GPIO Slice Card button pressesIt is available in the xSOFTip browser as:- Modbus RTU Demo: Please read the Modbus RTU Demo Quickstart Guide for further infomration on using this demo.